void computeLPSArray(const string &pat, int N, int lps[]){
    int len = 0;
    lps[0] = 0;

    int i = 1;
    while (i < N) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else{
            if (len != 0) {
                len = lps[len - 1];
            }
            else{
                lps[i] = 0;
                i++;
            }
        }
    }
}

int KMPSearch(const string &pat, const string &S){
    int N = pat.length();
    int M = S.length();

    int lps[N];
    computeLPSArray(pat, N, lps);

    int i = 0; // index for pat
    int j = 0; // index for S
    int coincidences = 0;
    while ((M - j) >= (N - i)) {
        if (pat[i] == S[j]) {
            i++;
            j++;
        }

        if (i == N) {
            coincidences++;
            i = lps[i - 1];
        }else if (j < M && pat[i] != S[j]) {
            if (i != 0){
                i = lps[i - 1];
            }else{
                j = j + 1;
            }
        }
    }
    return coincidences;
}
